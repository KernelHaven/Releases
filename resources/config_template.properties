# For boolean settings:
#  Anything but "true" is read as "false"; the "true" is not case sensitive.
#  If a boolean setting is missing and no default value is specified, then it is read as "false".

######################################
#    General Pipeline Parameters     #
######################################

# The path where extractors can store their resources. The extractors create sub-folders in this
# called the same as their fully qualified class names (to prevent conflicts).
# This has to be always set to a valid directory with write and read access.
resource_dir = /some/dir

# The path where the output files of the analysis will be stored.
# This has to be always set to a valid directory with write access.
output_dir = /some/dir

# The path where plugin .jars are loaded from. Every .jar in this directory is loaded into the JVM.
# This has to be always set to a valid directory with read access.
plugins_dir = /some/dir

# This is the directory where the providers will write and read their cache.
# This has to be set to a valid directory with write and read access.
# If cache.read or cache.write of a provider is set to true, then this setting has to be set.
cache_dir = /some/dir

# The path where log files will be written. Needs to be defined if log.file is true.
# If required, this has to be set to a valid directory with write access.
log.dir = /log/

# If set to true all logging sequences will be pushed to console, excluding huge third party outputs
# which will be trimmed to 500 characters.
# Default: true
log.console = true

# If set to true all logging sequences will be pushed to a log file in the directory defined in the log.dir setting.
# Default: false
log.file = false

# If set to false error log messages will be excluded from logging.
# Default: true
log.error = true

# If set to false warning log messages will be excluded from logging.
# Default: true
log.warning = true

# If set to false info log messages will be excluded from logging.
# Default: true
log.info = true

# If set to false debug log messages will be excluded from logging.
# Default: false
log.debug = false

# If set to true kernelhaven will archive itself, plugins, results, configuration and logs.
# Alternative to the --archive command line parameter
# Default: false
archive = false

# Directory to write to use for archiving the run of kernelhaven
archive.dir = /some/dir


##############################
#     Analysis Parameters    #
##############################

# The fully qualified class name of the analysis that should be run.
analysis.class = some.package.ClassName

#####################################
#    Common Extractor Parameters    #
#####################################

# The path to the source tree that should be analyzed
# Most extractors require this
source_tree = /some/dir/linux/

# The architecture of the Linux kernel that should be analyzed
# Most Linux extractors require this
arch = x86


################################
#     Code Model Parameters    #
################################

# The maximum time the provider waits for the results of the extractor until an exception is thrown.
# In milliseconds, default 0 = no timeout used.
code.provider.timeout = 0

# If set to true, then the code model provider will write its results to the cache directory.
# Default: false
code.provider.cache.write = true

# If set to true, then the code model provider is allowed to read the cache instead of starting the extractor.
# Default: false
code.provider.cache.read = true

# The fully qualified class name of the extractor for the code model.
# This is set to EmptyCodeModelExtractor if not specified.
code.extractor.class = some.package.ClassName

# Defines which files the code extractor should run on.
# Comma separated list of paths relative to the source tree.
# If directories are listed, then they are searched recursively for files that match the code.extractor.file_regex
# Leave empty to specify the complete source tree.
# Default value is empty
code.extractor.files = file1.c, dir/file2.c, dir/subdir/

# A Java regular expression defining which files are considered to be source files for parsing.
# Default value is '.*\.c'
code.extractor.file_regex = .*\.(h|c|S)

# The number of threads the code extractor should use. This many files are parsed in parallel.
# Default: 1
code.extractor.threads = 1


################################
#    Build Model Parameters    #
################################

# The maximum time the provider waits for the results of the extractor until an exception is thrown.
# In milliseconds, default 0 = no timeout used.
build.provider.timeout = 0

# If set to true, then the build model provider will write its result to the cache directory.
# Default: false
build.provider.cache.write = true

# If set to true, then the build model provider is allowed to read the cache instead of starting the extractor.
# Default: false
build.provider.cache.read = true

# The fully qualified class name of the extractor for the build model.
# This is set to EmptyBuildModelExtractor if not specified.
build.extractor.class = some.package.ClassName


#######################################
#     Variability Model Parameters    #
#######################################

# The maximum time the provider waits for the results of the extractor until an exception is thrown.
# In milliseconds, default 0 = no timeout used.
variability.provider.timeout = 0

# If set to true, then the variability model provider will write its result to the cache directory.
# Default: false
variability.provider.cache.write = true

# If set to true, then the variability model provider is allowed to read the cache instead of starting the extractor.
# Default: false
variability.provider.cache.read = true

# The fully qualified class name of the extractor for the variability model.
# This is set to EmptyVariabilityModelExtractor if not specified.
variability.extractor.class = some.package.ClassName
